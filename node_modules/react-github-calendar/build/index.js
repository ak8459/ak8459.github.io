'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var Calendar = require('react-activity-calendar');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);
var Calendar__default = /*#__PURE__*/_interopDefault(Calendar);

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

const API_URL = 'https://github-contributions-api.jogruber.de/v4/';

// GitHub theme
const DEFAULT_THEME = {
  light: ['#ebedf0', '#9be9a8', '#40c463', '#30a14e', '#216e39'],
  dark: ['#161b22', '#0e4429', '#006d32', '#26a641', '#39d353']
};

// noinspection SuspiciousTypeOfGuard The caller might not use TypeScript

const transformData = (data, transformFn) => {
  if (typeof transformFn !== 'function') {
    return data;
  }
  const transformedData = transformFn(data);
  if (!Array.isArray(transformedData)) {
    throw new Error(`Passed function transformData must return a list of Day objects.`);
  }
  if (transformedData.length > 0) {
    const testObj = transformedData[0];
    if (typeof testObj.count !== 'number' || testObj.count < 0) {
      throw new Error(`Required property "count: number" missing or invalid. Got: ${testObj.count}`);
    }
    if (!/\d{4}-\d{2}-\d{2}/.test(testObj.date)) {
      throw new Error(`Required property "date: YYYY-MM-DD" missing or invalid. Got: ${testObj.date}`);
    }
    if (typeof testObj.level !== 'number' || testObj.level < 0 || testObj.level > 4) {
      throw new Error(`Required property "level: 0 | 1 | 2 | 3 | 4" missing or invalid: Got: ${testObj.level}.`);
    }
  }
  return transformedData;
};

async function fetchCalendarData(username, year) {
  const response = await fetch(`${API_URL}${username}?y=${year}`);
  const data = await response.json();
  if (!response.ok) {
    throw new Error(data.error);
  }
  return data;
}
const GitHubCalendar = ({
  username,
  year = 'last',
  labels,
  transformData: transformDataCallback,
  transformTotalCount = true,
  ...props
}) => {
  const [data, setData] = React.useState(null);
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState(null);
  const fetchData = React.useCallback(() => {
    setLoading(true);
    setError(null);
    fetchCalendarData(username, year).then(setData).catch(setError).finally(() => setLoading(false));
  }, [username, year]);
  React.useEffect(fetchData, [fetchData]);
  if (error) {
    return /*#__PURE__*/React__default.default.createElement("div", null, /*#__PURE__*/React__default.default.createElement("i", null, "Unable to fetch contribution data. See console."));
  }
  if (loading || !data) {
    return /*#__PURE__*/React__default.default.createElement(Calendar.Skeleton, _extends({}, props, {
      loading: true
    }));
  }
  const theme = props.theme ?? DEFAULT_THEME;
  const defaultLabels = {
    totalCount: `{{count}} contributions in ${year === 'last' ? 'the last year' : '{{year}}'}`
  };
  const totalCount = year === 'last' ? data.total['lastYear'] : data.total[year];
  return /*#__PURE__*/React__default.default.createElement(Calendar__default.default, _extends({
    data: transformData(data.contributions, transformDataCallback),
    theme: theme,
    labels: Object.assign({}, defaultLabels, labels),
    totalCount: transformDataCallback && transformTotalCount ? undefined : totalCount
  }, props));
};

exports.default = GitHubCalendar;
//# sourceMappingURL=index.js.map
